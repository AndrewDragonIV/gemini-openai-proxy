export interface paths {
    "/chat/completions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** **Starting a new project?** We recommend trying [Responses](/docs/api-reference/responses)
         *     to take advantage of the latest OpenAI platform features. Compare
         *     [Chat Completions with Responses](/docs/guides/responses-vs-chat-completions?api-mode=responses).
         *
         *     ---
         *
         *     Creates a model response for the given chat conversation. Learn more in the
         *     [text generation](/docs/guides/text-generation), [vision](/docs/guides/vision),
         *     and [audio](/docs/guides/audio) guides.
         *
         *     Parameter support can differ depending on the model used to generate the
         *     response, particularly for newer reasoning models. Parameters that are only
         *     supported for reasoning models are noted below. For the current state of
         *     unsupported parameters in reasoning models,
         *     [refer to the reasoning guide](/docs/guides/reasoning).
         *      */
        post: operations["createChatCompletion"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/embeddings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Creates an embedding vector representing the input text. */
        post: operations["createEmbedding"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/models": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Lists the currently available models, and provides basic information about each one such as the owner and availability. */
        get: operations["listModels"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description Specifying a particular function via `{"name": "my_function"}` forces the model to call that function.
         *      */
        ChatCompletionFunctionCallOption: {
            /** @description The name of the function to call. */
            name: string;
        } & {
            [key: string]: unknown;
        };
        /** @deprecated */
        ChatCompletionFunctions: {
            /** @description A description of what the function does, used by the model to choose when and how to call the function. */
            description?: string;
            /** @description The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64. */
            name: string;
            parameters?: components["schemas"]["FunctionParameters"];
        } & {
            [key: string]: unknown;
        };
        ChatCompletionMessageToolCall: {
            /** @description The function that the model called. */
            function: {
                /** @description The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function. */
                arguments: string;
                /** @description The name of the function to call. */
                name: string;
            } & {
                [key: string]: unknown;
            };
            /** @description The ID of the tool call. */
            id: string;
            /**
             * @description The type of the tool. Currently, only `function` is supported.
             * @enum {string}
             */
            type: "function";
        } & {
            [key: string]: unknown;
        };
        ChatCompletionMessageToolCallChunk: {
            function?: {
                /** @description The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function. */
                arguments?: string;
                /** @description The name of the function to call. */
                name?: string;
            } & {
                [key: string]: unknown;
            };
            /** @description The ID of the tool call. */
            id?: string;
            index: number;
            /**
             * @description The type of the tool. Currently, only `function` is supported.
             * @enum {string}
             */
            type?: "function";
        } & {
            [key: string]: unknown;
        };
        /** @description The tool calls generated by the model, such as function calls. */
        ChatCompletionMessageToolCalls: components["schemas"]["ChatCompletionMessageToolCall"][];
        /** @description Specifies a tool the model should use. Use to force the model to call a specific function. */
        ChatCompletionNamedToolChoice: {
            function: {
                /** @description The name of the function to call. */
                name: string;
            } & {
                [key: string]: unknown;
            };
            /**
             * @description The type of the tool. Currently, only `function` is supported.
             * @enum {string}
             */
            type: "function";
        } & {
            [key: string]: unknown;
        };
        /**
         * Assistant message
         * @description Messages sent by the model in response to user messages.
         *
         */
        ChatCompletionRequestAssistantMessage: {
            /** @description Data about a previous audio response from the model.
             *     [Learn more](/docs/guides/audio).
             *      */
            audio?: ({
                /** @description Unique identifier for a previous audio response from the model.
                 *      */
                id: string;
            } & {
                [key: string]: unknown;
            }) | null;
            /** @description The contents of the assistant message. Required unless `tool_calls` or `function_call` is specified.
             *      */
            content?: (string | components["schemas"]["ChatCompletionRequestAssistantMessageContentPart"][]) | null;
            /**
             * @deprecated
             * @description Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.
             */
            function_call?: ({
                /** @description The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function. */
                arguments: string;
                /** @description The name of the function to call. */
                name: string;
            } & {
                [key: string]: unknown;
            }) | null;
            /** @description An optional name for the participant. Provides the model information to differentiate between participants of the same role. */
            name?: string;
            /** @description The refusal message by the assistant. */
            refusal?: string | null;
            /**
             * @description The role of the messages author, in this case `assistant`.
             * @enum {string}
             */
            role: "assistant";
            tool_calls?: components["schemas"]["ChatCompletionMessageToolCalls"];
        } & {
            [key: string]: unknown;
        };
        ChatCompletionRequestAssistantMessageContentPart: components["schemas"]["ChatCompletionRequestMessageContentPartText"] | components["schemas"]["ChatCompletionRequestMessageContentPartRefusal"];
        /**
         * Developer message
         * @description Developer-provided instructions that the model should follow, regardless of
         *     messages sent by the user. With o1 models and newer, `developer` messages
         *     replace the previous `system` messages.
         *
         */
        ChatCompletionRequestDeveloperMessage: {
            /** @description The contents of the developer message. */
            content: string | components["schemas"]["ChatCompletionRequestMessageContentPartText"][];
            /** @description An optional name for the participant. Provides the model information to differentiate between participants of the same role. */
            name?: string;
            /**
             * @description The role of the messages author, in this case `developer`.
             * @enum {string}
             */
            role: "developer";
        } & {
            [key: string]: unknown;
        };
        /**
         * Function message
         * @deprecated
         */
        ChatCompletionRequestFunctionMessage: {
            /** @description The contents of the function message. */
            content: string | null;
            /** @description The name of the function to call. */
            name: string;
            /**
             * @description The role of the messages author, in this case `function`.
             * @enum {string}
             */
            role: "function";
        } & {
            [key: string]: unknown;
        };
        ChatCompletionRequestMessage: components["schemas"]["ChatCompletionRequestDeveloperMessage"] | components["schemas"]["ChatCompletionRequestSystemMessage"] | components["schemas"]["ChatCompletionRequestUserMessage"] | components["schemas"]["ChatCompletionRequestAssistantMessage"] | components["schemas"]["ChatCompletionRequestToolMessage"] | components["schemas"]["ChatCompletionRequestFunctionMessage"];
        /**
         * Audio content part
         * @description Learn about [audio inputs](/docs/guides/audio).
         *
         */
        ChatCompletionRequestMessageContentPartAudio: {
            input_audio: {
                /** @description Base64 encoded audio data. */
                data: string;
                /**
                 * @description The format of the encoded audio data. Currently supports "wav" and "mp3".
                 *
                 * @enum {string}
                 */
                format: "wav" | "mp3";
            } & {
                [key: string]: unknown;
            };
            /**
             * @description The type of the content part. Always `input_audio`.
             * @enum {string}
             */
            type: "input_audio";
        } & {
            [key: string]: unknown;
        };
        /**
         * File content part
         * @description Learn about [file inputs](/docs/guides/text) for text generation.
         *
         */
        ChatCompletionRequestMessageContentPartFile: {
            file: {
                /** @description The base64 encoded file data, used when passing the file to the model
                 *     as a string.
                 *      */
                file_data?: string;
                /** @description The ID of an uploaded file to use as input.
                 *      */
                file_id?: string;
                /** @description The name of the file, used when passing the file to the model as a
                 *     string.
                 *      */
                filename?: string;
            } & {
                [key: string]: unknown;
            };
            /**
             * @description The type of the content part. Always `file`.
             * @enum {string}
             */
            type: "file";
        } & {
            [key: string]: unknown;
        };
        /**
         * Image content part
         * @description Learn about [image inputs](/docs/guides/vision).
         *
         */
        ChatCompletionRequestMessageContentPartImage: {
            image_url: {
                /**
                 * @description Specifies the detail level of the image. Learn more in the [Vision guide](/docs/guides/vision#low-or-high-fidelity-image-understanding).
                 * @default auto
                 * @enum {string}
                 */
                detail: "auto" | "low" | "high";
                /**
                 * Format: uri
                 * @description Either a URL of the image or the base64 encoded image data.
                 */
                url: string;
            } & {
                [key: string]: unknown;
            };
            /**
             * @description The type of the content part.
             * @enum {string}
             */
            type: "image_url";
        } & {
            [key: string]: unknown;
        };
        /** Refusal content part */
        ChatCompletionRequestMessageContentPartRefusal: {
            /** @description The refusal message generated by the model. */
            refusal: string;
            /**
             * @description The type of the content part.
             * @enum {string}
             */
            type: "refusal";
        } & {
            [key: string]: unknown;
        };
        /**
         * Text content part
         * @description Learn about [text inputs](/docs/guides/text-generation).
         *
         */
        ChatCompletionRequestMessageContentPartText: {
            /** @description The text content. */
            text: string;
            /**
             * @description The type of the content part.
             * @enum {string}
             */
            type: "text";
        } & {
            [key: string]: unknown;
        };
        /**
         * System message
         * @description Developer-provided instructions that the model should follow, regardless of
         *     messages sent by the user. With o1 models and newer, use `developer` messages
         *     for this purpose instead.
         *
         */
        ChatCompletionRequestSystemMessage: {
            /** @description The contents of the system message. */
            content: string | components["schemas"]["ChatCompletionRequestSystemMessageContentPart"][];
            /** @description An optional name for the participant. Provides the model information to differentiate between participants of the same role. */
            name?: string;
            /**
             * @description The role of the messages author, in this case `system`.
             * @enum {string}
             */
            role: "system";
        } & {
            [key: string]: unknown;
        };
        ChatCompletionRequestSystemMessageContentPart: components["schemas"]["ChatCompletionRequestMessageContentPartText"];
        /** Tool message */
        ChatCompletionRequestToolMessage: {
            /** @description The contents of the tool message. */
            content: string | components["schemas"]["ChatCompletionRequestToolMessageContentPart"][];
            /**
             * @description The role of the messages author, in this case `tool`.
             * @enum {string}
             */
            role: "tool";
            /** @description Tool call that this message is responding to. */
            tool_call_id: string;
        } & {
            [key: string]: unknown;
        };
        ChatCompletionRequestToolMessageContentPart: components["schemas"]["ChatCompletionRequestMessageContentPartText"];
        /**
         * User message
         * @description Messages sent by an end user, containing prompts or additional context
         *     information.
         *
         */
        ChatCompletionRequestUserMessage: {
            /** @description The contents of the user message.
             *      */
            content: string | components["schemas"]["ChatCompletionRequestUserMessageContentPart"][];
            /** @description An optional name for the participant. Provides the model information to differentiate between participants of the same role. */
            name?: string;
            /**
             * @description The role of the messages author, in this case `user`.
             * @enum {string}
             */
            role: "user";
        } & {
            [key: string]: unknown;
        };
        ChatCompletionRequestUserMessageContentPart: components["schemas"]["ChatCompletionRequestMessageContentPartText"] | components["schemas"]["ChatCompletionRequestMessageContentPartImage"] | components["schemas"]["ChatCompletionRequestMessageContentPartAudio"] | components["schemas"]["ChatCompletionRequestMessageContentPartFile"];
        /** @description A chat completion message generated by the model. */
        ChatCompletionResponseMessage: {
            /** @description Annotations for the message, when applicable, as when using the
             *     [web search tool](/docs/guides/tools-web-search?api-mode=chat).
             *      */
            annotations?: ({
                /**
                 * @description The type of the URL citation. Always `url_citation`.
                 * @enum {string}
                 */
                type: "url_citation";
                /** @description A URL citation when using web search. */
                url_citation: {
                    /** @description The index of the last character of the URL citation in the message. */
                    end_index: number;
                    /** @description The index of the first character of the URL citation in the message. */
                    start_index: number;
                    /** @description The title of the web resource. */
                    title: string;
                    /** @description The URL of the web resource. */
                    url: string;
                } & {
                    [key: string]: unknown;
                };
            } & {
                [key: string]: unknown;
            })[];
            /** @description If the audio output modality is requested, this object contains data
             *     about the audio response from the model. [Learn more](/docs/guides/audio).
             *      */
            audio?: ({
                /** @description Base64 encoded audio bytes generated by the model, in the format
                 *     specified in the request.
                 *      */
                data: string;
                /** @description The Unix timestamp (in seconds) for when this audio response will
                 *     no longer be accessible on the server for use in multi-turn
                 *     conversations.
                 *      */
                expires_at: number;
                /** @description Unique identifier for this audio response. */
                id: string;
                /** @description Transcript of the audio generated by the model. */
                transcript: string;
            } & {
                [key: string]: unknown;
            }) | null;
            /** @description The contents of the message. */
            content: string | null;
            /**
             * @deprecated
             * @description Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.
             */
            function_call?: {
                /** @description The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function. */
                arguments: string;
                /** @description The name of the function to call. */
                name: string;
            } & {
                [key: string]: unknown;
            };
            /** @description The refusal message generated by the model. */
            refusal: string | null;
            /**
             * @description The role of the author of this message.
             * @enum {string}
             */
            role: "assistant";
            tool_calls?: components["schemas"]["ChatCompletionMessageToolCalls"];
        } & {
            [key: string]: unknown;
        };
        /**
         * @description Options for streaming response. Only set this when you set `stream: true`.
         *
         * @default null
         */
        ChatCompletionStreamOptions: ({
            /** @description If set, an additional chunk will be streamed before the `data: [DONE]`
             *     message. The `usage` field on this chunk shows the token usage statistics
             *     for the entire request, and the `choices` field will always be an empty
             *     array.
             *
             *     All other chunks will also include a `usage` field, but with a null
             *     value. **NOTE:** If the stream is interrupted, you may not receive the
             *     final usage chunk which contains the total token usage for the request.
             *      */
            include_usage?: boolean;
        } & {
            [key: string]: unknown;
        }) | null;
        /** @description A chat completion delta generated by streamed model responses. */
        ChatCompletionStreamResponseDelta: {
            /** @description The contents of the chunk message. */
            content?: string | null;
            /**
             * @deprecated
             * @description Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.
             */
            function_call?: {
                /** @description The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function. */
                arguments?: string;
                /** @description The name of the function to call. */
                name?: string;
            } & {
                [key: string]: unknown;
            };
            /** @description The refusal message generated by the model. */
            refusal?: string | null;
            /**
             * @description The role of the author of this message.
             * @enum {string}
             */
            role?: "developer" | "system" | "user" | "assistant" | "tool";
            tool_calls?: components["schemas"]["ChatCompletionMessageToolCallChunk"][];
        } & {
            [key: string]: unknown;
        };
        ChatCompletionTokenLogprob: {
            /** @description A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token. */
            bytes: number[] | null;
            /** @description The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value `-9999.0` is used to signify that the token is very unlikely. */
            logprob: number;
            /** @description The token. */
            token: string;
            /** @description List of the most likely tokens and their log probability, at this token position. In rare cases, there may be fewer than the number of requested `top_logprobs` returned. */
            top_logprobs: ({
                /** @description A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token. */
                bytes: number[] | null;
                /** @description The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value `-9999.0` is used to signify that the token is very unlikely. */
                logprob: number;
                /** @description The token. */
                token: string;
            } & {
                [key: string]: unknown;
            })[];
        } & {
            [key: string]: unknown;
        };
        ChatCompletionTool: {
            function: components["schemas"]["FunctionObject"];
            /**
             * @description The type of the tool. Currently, only `function` is supported.
             * @enum {string}
             */
            type: "function";
        } & {
            [key: string]: unknown;
        };
        /** @description Controls which (if any) tool is called by the model.
         *     `none` means the model will not call any tool and instead generates a message.
         *     `auto` means the model can pick between generating a message or calling one or more tools.
         *     `required` means the model must call one or more tools.
         *     Specifying a particular tool via `{"type": "function", "function": {"name": "my_function"}}` forces the model to call that tool.
         *
         *     `none` is the default when no tools are present. `auto` is the default if tools are present.
         *      */
        ChatCompletionToolChoiceOption: ("none" | "auto" | "required") | components["schemas"]["ChatCompletionNamedToolChoice"];
        /** @description Usage statistics for the completion request. */
        CompletionUsage: {
            /**
             * @description Number of tokens in the generated completion.
             * @default 0
             */
            completion_tokens: number;
            /** @description Breakdown of tokens used in a completion. */
            completion_tokens_details?: {
                /**
                 * @description When using Predicted Outputs, the number of tokens in the
                 *     prediction that appeared in the completion.
                 *
                 * @default 0
                 */
                accepted_prediction_tokens: number;
                /**
                 * @description Audio input tokens generated by the model.
                 * @default 0
                 */
                audio_tokens: number;
                /**
                 * @description Tokens generated by the model for reasoning.
                 * @default 0
                 */
                reasoning_tokens: number;
                /**
                 * @description When using Predicted Outputs, the number of tokens in the
                 *     prediction that did not appear in the completion. However, like
                 *     reasoning tokens, these tokens are still counted in the total
                 *     completion tokens for purposes of billing, output, and context window
                 *     limits.
                 *
                 * @default 0
                 */
                rejected_prediction_tokens: number;
            } & {
                [key: string]: unknown;
            };
            /**
             * @description Number of tokens in the prompt.
             * @default 0
             */
            prompt_tokens: number;
            /** @description Breakdown of tokens used in the prompt. */
            prompt_tokens_details?: {
                /**
                 * @description Audio input tokens present in the prompt.
                 * @default 0
                 */
                audio_tokens: number;
                /**
                 * @description Cached tokens present in the prompt.
                 * @default 0
                 */
                cached_tokens: number;
            } & {
                [key: string]: unknown;
            };
            /**
             * @description Total number of tokens used in the request (prompt + completion).
             * @default 0
             */
            total_tokens: number;
        } & {
            [key: string]: unknown;
        };
        CreateChatCompletionRequest: components["schemas"]["CreateModelResponseProperties"] & ({
            /** @description Parameters for audio output. Required when audio output is requested with
             *     `modalities: ["audio"]`. [Learn more](/docs/guides/audio).
             *      */
            audio?: ({
                /**
                 * @description Specifies the output audio format. Must be one of `wav`, `mp3`, `flac`,
                 *     `opus`, or `pcm16`.
                 *
                 * @enum {string}
                 */
                format: "wav" | "aac" | "mp3" | "flac" | "opus" | "pcm16";
                /** @description The voice the model uses to respond. Supported voices are
                 *     `alloy`, `ash`, `ballad`, `coral`, `echo`, `fable`, `nova`, `onyx`, `sage`, and `shimmer`.
                 *      */
                voice: components["schemas"]["VoiceIdsShared"];
            } & {
                [key: string]: unknown;
            }) | null;
            /**
             * @description Number between -2.0 and 2.0. Positive values penalize new tokens based on
             *     their existing frequency in the text so far, decreasing the model's
             *     likelihood to repeat the same line verbatim.
             *
             * @default 0
             */
            frequency_penalty: number | null;
            /**
             * @deprecated
             * @description Deprecated in favor of `tool_choice`.
             *
             *     Controls which (if any) function is called by the model.
             *
             *     `none` means the model will not call a function and instead generates a
             *     message.
             *
             *     `auto` means the model can pick between generating a message or calling a
             *     function.
             *
             *     Specifying a particular function via `{"name": "my_function"}` forces the
             *     model to call that function.
             *
             *     `none` is the default when no functions are present. `auto` is the default
             *     if functions are present.
             *
             */
            function_call?: ("none" | "auto") | components["schemas"]["ChatCompletionFunctionCallOption"];
            /**
             * @deprecated
             * @description Deprecated in favor of `tools`.
             *
             *     A list of functions the model may generate JSON inputs for.
             *
             */
            functions?: components["schemas"]["ChatCompletionFunctions"][];
            /**
             * @description Modify the likelihood of specified tokens appearing in the completion.
             *
             *     Accepts a JSON object that maps tokens (specified by their token ID in the
             *     tokenizer) to an associated bias value from -100 to 100. Mathematically,
             *     the bias is added to the logits generated by the model prior to sampling.
             *     The exact effect will vary per model, but values between -1 and 1 should
             *     decrease or increase likelihood of selection; values like -100 or 100
             *     should result in a ban or exclusive selection of the relevant token.
             *
             * @default null
             */
            logit_bias: {
                [key: string]: number;
            } | null;
            /**
             * @description Whether to return log probabilities of the output tokens or not. If true,
             *     returns the log probabilities of each output token returned in the
             *     `content` of `message`.
             *
             * @default false
             */
            logprobs: boolean | null;
            /** @description An upper bound for the number of tokens that can be generated for a completion, including visible output tokens and [reasoning tokens](/docs/guides/reasoning).
             *      */
            max_completion_tokens?: number | null;
            /**
             * @deprecated
             * @description The maximum number of [tokens](/tokenizer) that can be generated in the
             *     chat completion. This value can be used to control
             *     [costs](https://openai.com/api/pricing/) for text generated via API.
             *
             *     This value is now deprecated in favor of `max_completion_tokens`, and is
             *     not compatible with [o-series models](/docs/guides/reasoning).
             *
             */
            max_tokens?: number | null;
            /** @description A list of messages comprising the conversation so far. Depending on the
             *     [model](/docs/models) you use, different message types (modalities) are
             *     supported, like [text](/docs/guides/text-generation),
             *     [images](/docs/guides/vision), and [audio](/docs/guides/audio).
             *      */
            messages: components["schemas"]["ChatCompletionRequestMessage"][];
            modalities?: components["schemas"]["ResponseModalities"];
            /** @description Model ID used to generate the response, like `gpt-4o` or `o3`. OpenAI
             *     offers a wide range of models with different capabilities, performance
             *     characteristics, and price points. Refer to the [model guide](/docs/models)
             *     to browse and compare available models.
             *      */
            model: components["schemas"]["ModelIdsShared"];
            /**
             * @description How many chat completion choices to generate for each input message. Note that you will be charged based on the number of generated tokens across all of the choices. Keep `n` as `1` to minimize costs.
             * @default 1
             * @example 1
             */
            n: number;
            parallel_tool_calls?: components["schemas"]["ParallelToolCalls"];
            /** @description Configuration for a [Predicted Output](/docs/guides/predicted-outputs),
             *     which can greatly improve response times when large parts of the model
             *     response are known ahead of time. This is most common when you are
             *     regenerating a file with only minor changes to most of the content.
             *      */
            prediction?: components["schemas"]["PredictionContent"] | null;
            /**
             * @description Number between -2.0 and 2.0. Positive values penalize new tokens based on
             *     whether they appear in the text so far, increasing the model's likelihood
             *     to talk about new topics.
             *
             * @default 0
             */
            presence_penalty: number | null;
            reasoning_effort?: components["schemas"]["ReasoningEffort"];
            /** @description An object specifying the format that the model must output.
             *
             *     Setting to `{ "type": "json_schema", "json_schema": {...} }` enables
             *     Structured Outputs which ensures the model will match your supplied JSON
             *     schema. Learn more in the [Structured Outputs
             *     guide](/docs/guides/structured-outputs).
             *
             *     Setting to `{ "type": "json_object" }` enables the older JSON mode, which
             *     ensures the message the model generates is valid JSON. Using `json_schema`
             *     is preferred for models that support it.
             *      */
            response_format?: components["schemas"]["ResponseFormatText"] | components["schemas"]["ResponseFormatJsonSchema"] | components["schemas"]["ResponseFormatJsonObject"];
            /** @description This feature is in Beta.
             *     If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result.
             *     Determinism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend.
             *      */
            seed?: number | null;
            stop?: components["schemas"]["StopConfiguration"];
            /**
             * @description Whether or not to store the output of this chat completion request for
             *     use in our [model distillation](/docs/guides/distillation) or
             *     [evals](/docs/guides/evals) products.
             *
             * @default false
             */
            store: boolean | null;
            /**
             * @description If set to true, the model response data will be streamed to the client
             *     as it is generated using [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format).
             *     See the [Streaming section below](/docs/api-reference/chat/streaming)
             *     for more information, along with the [streaming responses](/docs/guides/streaming-responses)
             *     guide for more information on how to handle the streaming events.
             *
             * @default false
             */
            stream: boolean | null;
            stream_options?: components["schemas"]["ChatCompletionStreamOptions"];
            tool_choice?: components["schemas"]["ChatCompletionToolChoiceOption"];
            /** @description A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for. A max of 128 functions are supported.
             *      */
            tools?: components["schemas"]["ChatCompletionTool"][];
            /** @description An integer between 0 and 20 specifying the number of most likely tokens to
             *     return at each token position, each with an associated log probability.
             *     `logprobs` must be set to `true` if this parameter is used.
             *      */
            top_logprobs?: number | null;
            /**
             * Web search
             * @description This tool searches the web for relevant results to use in a response.
             *     Learn more about the [web search tool](/docs/guides/tools-web-search?api-mode=chat).
             *
             */
            web_search_options?: {
                search_context_size?: components["schemas"]["WebSearchContextSize"];
                /** @description Approximate location parameters for the search.
                 *      */
                user_location?: ({
                    approximate: components["schemas"]["WebSearchLocation"];
                    /**
                     * @description The type of location approximation. Always `approximate`.
                     *
                     * @enum {string}
                     */
                    type: "approximate";
                } & {
                    [key: string]: unknown;
                }) | null;
            } & {
                [key: string]: unknown;
            };
        } & {
            [key: string]: unknown;
        });
        /** @description Represents a chat completion response returned by model, based on the provided input. */
        CreateChatCompletionResponse: {
            /** @description A list of chat completion choices. Can be more than one if `n` is greater than 1. */
            choices: ({
                /**
                 * @description The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,
                 *     `length` if the maximum number of tokens specified in the request was reached,
                 *     `content_filter` if content was omitted due to a flag from our content filters,
                 *     `tool_calls` if the model called a tool, or `function_call` (deprecated) if the model called a function.
                 *
                 * @enum {string}
                 */
                finish_reason: "stop" | "length" | "tool_calls" | "content_filter" | "function_call";
                /** @description The index of the choice in the list of choices. */
                index: number;
                /** @description Log probability information for the choice. */
                logprobs: ({
                    /** @description A list of message content tokens with log probability information. */
                    content: components["schemas"]["ChatCompletionTokenLogprob"][] | null;
                    /** @description A list of message refusal tokens with log probability information. */
                    refusal: components["schemas"]["ChatCompletionTokenLogprob"][] | null;
                } & {
                    [key: string]: unknown;
                }) | null;
                message: components["schemas"]["ChatCompletionResponseMessage"];
            } & {
                [key: string]: unknown;
            })[];
            /** @description The Unix timestamp (in seconds) of when the chat completion was created. */
            created: number;
            /** @description A unique identifier for the chat completion. */
            id: string;
            /** @description The model used for the chat completion. */
            model: string;
            /**
             * @description The object type, which is always `chat.completion`.
             * @enum {string}
             */
            object: "chat.completion";
            service_tier?: components["schemas"]["ServiceTier"];
            /** @description This fingerprint represents the backend configuration that the model runs with.
             *
             *     Can be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.
             *      */
            system_fingerprint?: string;
            usage?: components["schemas"]["CompletionUsage"];
        } & {
            [key: string]: unknown;
        };
        /** @description Represents a streamed chunk of a chat completion response returned
         *     by the model, based on the provided input.
         *     [Learn more](/docs/guides/streaming-responses).
         *      */
        CreateChatCompletionStreamResponse: {
            /** @description A list of chat completion choices. Can contain more than one elements if `n` is greater than 1. Can also be empty for the
             *     last chunk if you set `stream_options: {"include_usage": true}`.
             *      */
            choices: ({
                delta: components["schemas"]["ChatCompletionStreamResponseDelta"];
                /**
                 * @description The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,
                 *     `length` if the maximum number of tokens specified in the request was reached,
                 *     `content_filter` if content was omitted due to a flag from our content filters,
                 *     `tool_calls` if the model called a tool, or `function_call` (deprecated) if the model called a function.
                 *
                 * @enum {string|null}
                 */
                finish_reason: "stop" | "length" | "tool_calls" | "content_filter" | "function_call" | null;
                /** @description The index of the choice in the list of choices. */
                index: number;
                /** @description Log probability information for the choice. */
                logprobs?: ({
                    /** @description A list of message content tokens with log probability information. */
                    content: components["schemas"]["ChatCompletionTokenLogprob"][] | null;
                    /** @description A list of message refusal tokens with log probability information. */
                    refusal: components["schemas"]["ChatCompletionTokenLogprob"][] | null;
                } & {
                    [key: string]: unknown;
                }) | null;
            } & {
                [key: string]: unknown;
            })[];
            /** @description The Unix timestamp (in seconds) of when the chat completion was created. Each chunk has the same timestamp. */
            created: number;
            /** @description A unique identifier for the chat completion. Each chunk has the same ID. */
            id: string;
            /** @description The model to generate the completion. */
            model: string;
            /**
             * @description The object type, which is always `chat.completion.chunk`.
             * @enum {string}
             */
            object: "chat.completion.chunk";
            service_tier?: components["schemas"]["ServiceTier"];
            /** @description This fingerprint represents the backend configuration that the model runs with.
             *     Can be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.
             *      */
            system_fingerprint?: string;
            /** @description An optional field that will only be present when you set
             *     `stream_options: {"include_usage": true}` in your request. When present, it
             *     contains a null value **except for the last chunk** which contains the
             *     token usage statistics for the entire request.
             *
             *     **NOTE:** If the stream is interrupted or cancelled, you may not
             *     receive the final usage chunk which contains the total token usage for
             *     the request.
             *      */
            usage?: components["schemas"]["CompletionUsage"];
        } & {
            [key: string]: unknown;
        };
        CreateEmbeddingRequest: {
            /** @description The number of dimensions the resulting output embeddings should have. Only supported in `text-embedding-3` and later models.
             *      */
            dimensions?: number;
            /**
             * @description The format to return the embeddings in. Can be either `float` or [`base64`](https://pypi.org/project/pybase64/).
             * @default float
             * @example float
             * @enum {string}
             */
            encoding_format: "float" | "base64";
            /**
             * @description Input text to embed, encoded as a string or array of tokens. To embed multiple inputs in a single request, pass an array of strings or array of token arrays. The input must not exceed the max input tokens for the model (8192 tokens for all embedding models), cannot be an empty string, and any array must be 2048 dimensions or less. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens. In addition to the per-input token limit, all embedding  models enforce a maximum of 300,000 tokens summed across all inputs in a  single request.
             *
             * @example The quick brown fox jumped over the lazy dog
             */
            input: string | string[] | number[] | number[][];
            /**
             * @description ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models) for descriptions of them.
             *
             * @example text-embedding-3-small
             */
            model: string | ("text-embedding-ada-002" | "text-embedding-3-small" | "text-embedding-3-large");
            /**
             * @description A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids).
             *
             * @example user-1234
             */
            user?: string;
        } & {
            [key: string]: unknown;
        };
        CreateEmbeddingResponse: {
            /** @description The list of embeddings generated by the model. */
            data: components["schemas"]["Embedding"][];
            /** @description The name of the model used to generate the embedding. */
            model: string;
            /**
             * @description The object type, which is always "list".
             * @enum {string}
             */
            object: "list";
            /** @description The usage information for the request. */
            usage: {
                /** @description The number of tokens used by the prompt. */
                prompt_tokens: number;
                /** @description The total number of tokens used by the request. */
                total_tokens: number;
            } & {
                [key: string]: unknown;
            };
        } & {
            [key: string]: unknown;
        };
        CreateModelResponseProperties: components["schemas"]["ModelResponseProperties"];
        /** @description Represents an embedding vector returned by embedding endpoint.
         *      */
        Embedding: {
            /** @description The embedding vector, which is a list of floats. The length of vector depends on the model as listed in the [embedding guide](/docs/guides/embeddings).
             *      */
            embedding: number[];
            /** @description The index of the embedding in the list of embeddings. */
            index: number;
            /**
             * @description The object type, which is always "embedding".
             * @enum {string}
             */
            object: "embedding";
        } & {
            [key: string]: unknown;
        };
        FunctionObject: {
            /** @description A description of what the function does, used by the model to choose when and how to call the function. */
            description?: string;
            /** @description The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64. */
            name: string;
            parameters?: components["schemas"]["FunctionParameters"];
            /**
             * @description Whether to enable strict schema adherence when generating the function call. If set to true, the model will follow the exact schema defined in the `parameters` field. Only a subset of JSON Schema is supported when `strict` is `true`. Learn more about Structured Outputs in the [function calling guide](docs/guides/function-calling).
             * @default false
             */
            strict: boolean | null;
        } & {
            [key: string]: unknown;
        };
        /** @description The parameters the functions accepts, described as a JSON Schema object. See the [guide](/docs/guides/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format.
         *
         *     Omitting `parameters` defines a function with an empty parameter list. */
        FunctionParameters: {
            [key: string]: unknown;
        };
        ListModelsResponse: {
            data: components["schemas"]["Model"][];
            /** @enum {string} */
            object: "list";
        } & {
            [key: string]: unknown;
        };
        /** @description Set of 16 key-value pairs that can be attached to an object. This can be
         *     useful for storing additional information about the object in a structured
         *     format, and querying for objects via API or the dashboard.
         *
         *     Keys are strings with a maximum length of 64 characters. Values are strings
         *     with a maximum length of 512 characters.
         *      */
        Metadata: {
            [key: string]: string;
        } | null;
        /**
         * Model
         * @description Describes an OpenAI model offering that can be used with the API.
         */
        Model: {
            /** @description The Unix timestamp (in seconds) when the model was created. */
            created: number;
            /** @description The model identifier, which can be referenced in the API endpoints. */
            id: string;
            /**
             * @description The object type, which is always "model".
             * @enum {string}
             */
            object: "model";
            /** @description The organization that owns the model. */
            owned_by: string;
        } & {
            [key: string]: unknown;
        };
        /** @example gpt-4o */
        ModelIdsShared: string | ("gpt-4.1" | "gpt-4.1-mini" | "gpt-4.1-nano" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "gpt-4.1-nano-2025-04-14" | "o4-mini" | "o4-mini-2025-04-16" | "o3" | "o3-2025-04-16" | "o3-mini" | "o3-mini-2025-01-31" | "o1" | "o1-2024-12-17" | "o1-preview" | "o1-preview-2024-09-12" | "o1-mini" | "o1-mini-2024-09-12" | "gpt-4o" | "gpt-4o-2024-11-20" | "gpt-4o-2024-08-06" | "gpt-4o-2024-05-13" | "gpt-4o-audio-preview" | "gpt-4o-audio-preview-2024-10-01" | "gpt-4o-audio-preview-2024-12-17" | "gpt-4o-audio-preview-2025-06-03" | "gpt-4o-mini-audio-preview" | "gpt-4o-mini-audio-preview-2024-12-17" | "gpt-4o-search-preview" | "gpt-4o-mini-search-preview" | "gpt-4o-search-preview-2025-03-11" | "gpt-4o-mini-search-preview-2025-03-11" | "chatgpt-4o-latest" | "codex-mini-latest" | "gpt-4o-mini" | "gpt-4o-mini-2024-07-18" | "gpt-4-turbo" | "gpt-4-turbo-2024-04-09" | "gpt-4-0125-preview" | "gpt-4-turbo-preview" | "gpt-4-1106-preview" | "gpt-4-vision-preview" | "gpt-4" | "gpt-4-0314" | "gpt-4-0613" | "gpt-4-32k" | "gpt-4-32k-0314" | "gpt-4-32k-0613" | "gpt-3.5-turbo" | "gpt-3.5-turbo-16k" | "gpt-3.5-turbo-0301" | "gpt-3.5-turbo-0613" | "gpt-3.5-turbo-1106" | "gpt-3.5-turbo-0125" | "gpt-3.5-turbo-16k-0613");
        ModelResponseProperties: {
            metadata?: components["schemas"]["Metadata"];
            service_tier?: components["schemas"]["ServiceTier"];
            /**
             * @description What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
             *     We generally recommend altering this or `top_p` but not both.
             *
             * @default 1
             * @example 1
             */
            temperature: number;
            /**
             * @description An alternative to sampling with temperature, called nucleus sampling,
             *     where the model considers the results of the tokens with top_p probability
             *     mass. So 0.1 means only the tokens comprising the top 10% probability mass
             *     are considered.
             *
             *     We generally recommend altering this or `temperature` but not both.
             *
             * @default 1
             * @example 1
             */
            top_p: number;
            /**
             * @description A stable identifier for your end-users.
             *     Used to boost cache hit rates by better bucketing similar requests and  to help OpenAI detect and prevent abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids).
             *
             * @example user-1234
             */
            user?: string;
        } & {
            [key: string]: unknown;
        };
        /**
         * @description Whether to enable [parallel function calling](/docs/guides/function-calling#configuring-parallel-function-calling) during tool use.
         * @default true
         */
        ParallelToolCalls: boolean;
        /**
         * Static Content
         * @description Static predicted output content, such as the content of a text file that is
         *     being regenerated.
         *
         */
        PredictionContent: {
            /** @description The content that should be matched when generating a model response.
             *     If generated tokens would match this content, the entire model response
             *     can be returned much more quickly.
             *      */
            content: string | components["schemas"]["ChatCompletionRequestMessageContentPartText"][];
            /**
             * @description The type of the predicted content you want to provide. This type is
             *     currently always `content`.
             *
             * @enum {string}
             */
            type: "content";
        } & {
            [key: string]: unknown;
        };
        /**
         * @description **o-series models only**
         *
         *     Constrains effort on reasoning for
         *     [reasoning models](https://platform.openai.com/docs/guides/reasoning).
         *     Currently supported values are `low`, `medium`, and `high`. Reducing
         *     reasoning effort can result in faster responses and fewer tokens used
         *     on reasoning in a response.
         *
         * @default medium
         * @enum {string|null}
         */
        ReasoningEffort: "low" | "medium" | "high";
        /**
         * JSON object
         * @description JSON object response format. An older method of generating JSON responses.
         *     Using `json_schema` is recommended for models that support it. Note that the
         *     model will not generate JSON without a system or user message instructing it
         *     to do so.
         *
         */
        ResponseFormatJsonObject: {
            /**
             * @description The type of response format being defined. Always `json_object`.
             * @enum {string}
             */
            type: "json_object";
        } & {
            [key: string]: unknown;
        };
        /**
         * JSON schema
         * @description JSON Schema response format. Used to generate structured JSON responses.
         *     Learn more about [Structured Outputs](/docs/guides/structured-outputs).
         *
         */
        ResponseFormatJsonSchema: {
            /**
             * JSON schema
             * @description Structured Outputs configuration options, including a JSON Schema.
             *
             */
            json_schema: {
                /** @description A description of what the response format is for, used by the model to
                 *     determine how to respond in the format.
                 *      */
                description?: string;
                /** @description The name of the response format. Must be a-z, A-Z, 0-9, or contain
                 *     underscores and dashes, with a maximum length of 64.
                 *      */
                name: string;
                schema?: components["schemas"]["ResponseFormatJsonSchemaSchema"];
                /**
                 * @description Whether to enable strict schema adherence when generating the output.
                 *     If set to true, the model will always follow the exact schema defined
                 *     in the `schema` field. Only a subset of JSON Schema is supported when
                 *     `strict` is `true`. To learn more, read the [Structured Outputs
                 *     guide](/docs/guides/structured-outputs).
                 *
                 * @default false
                 */
                strict: boolean | null;
            } & {
                [key: string]: unknown;
            };
            /**
             * @description The type of response format being defined. Always `json_schema`.
             * @enum {string}
             */
            type: "json_schema";
        } & {
            [key: string]: unknown;
        };
        /**
         * JSON schema
         * @description The schema for the response format, described as a JSON Schema object.
         *     Learn how to build JSON schemas [here](https://json-schema.org/).
         *
         */
        ResponseFormatJsonSchemaSchema: {
            [key: string]: unknown;
        };
        /**
         * Text
         * @description Default response format. Used to generate text responses.
         *
         */
        ResponseFormatText: {
            /**
             * @description The type of response format being defined. Always `text`.
             * @enum {string}
             */
            type: "text";
        } & {
            [key: string]: unknown;
        };
        /** @description Output types that you would like the model to generate.
         *     Most models are capable of generating text, which is the default:
         *
         *     `["text"]`
         *
         *     The `gpt-4o-audio-preview` model can also be used to
         *     [generate audio](/docs/guides/audio). To request that this model generate
         *     both text and audio responses, you can use:
         *
         *     `["text", "audio"]`
         *      */
        ResponseModalities: ("text" | "audio")[] | null;
        /**
         * @description Specifies the latency tier to use for processing the request. This parameter is relevant for customers subscribed to the scale tier service:
         *       - If set to 'auto', and the Project is Scale tier enabled, the system
         *         will utilize scale tier credits until they are exhausted.
         *       - If set to 'auto', and the Project is not Scale tier enabled, the request will be processed using the default service tier with a lower uptime SLA and no latency guarantee.
         *       - If set to 'default', the request will be processed using the default service tier with a lower uptime SLA and no latency guarantee.
         *       - If set to 'flex', the request will be processed with the Flex Processing service tier. [Learn more](/docs/guides/flex-processing).
         *       - When not set, the default behavior is 'auto'.
         *
         *       When this parameter is set, the response body will include the `service_tier` utilized.
         *
         * @default auto
         * @enum {string|null}
         */
        ServiceTier: "auto" | "default" | "flex" | "scale";
        /**
         * @description Not supported with latest reasoning models `o3` and `o4-mini`.
         *
         *     Up to 4 sequences where the API will stop generating further tokens. The
         *     returned text will not contain the stop sequence.
         *
         * @default null
         */
        StopConfiguration: (string | string[]) | null;
        /** @example ash */
        VoiceIdsShared: string | ("alloy" | "ash" | "ballad" | "coral" | "echo" | "fable" | "onyx" | "nova" | "sage" | "shimmer" | "verse");
        /**
         * @description High level guidance for the amount of context window space to use for the
         *     search. One of `low`, `medium`, or `high`. `medium` is the default.
         *
         * @default medium
         * @enum {string}
         */
        WebSearchContextSize: "low" | "medium" | "high";
        /**
         * Web search location
         * @description Approximate location parameters for the search.
         */
        WebSearchLocation: {
            /** @description Free text input for the city of the user, e.g. `San Francisco`.
             *      */
            city?: string;
            /** @description The two-letter
             *     [ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1) of the user,
             *     e.g. `US`.
             *      */
            country?: string;
            /** @description Free text input for the region of the user, e.g. `California`.
             *      */
            region?: string;
            /** @description The [IANA timezone](https://timeapi.io/documentation/iana-timezones)
             *     of the user, e.g. `America/Los_Angeles`.
             *      */
            timezone?: string;
        } & {
            [key: string]: unknown;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    createChatCompletion: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateChatCompletionRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateChatCompletionResponse"];
                    "text/event-stream": components["schemas"]["CreateChatCompletionStreamResponse"];
                };
            };
        };
    };
    createEmbedding: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateEmbeddingRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateEmbeddingResponse"];
                };
            };
        };
    };
    listModels: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListModelsResponse"];
                };
            };
        };
    };
}
